ord <- order(pg$flipper_length_mm, decreasing = F)
rownames(pg[ord,]) <- NULL
pg[ord,]
pg.ord <- pg[ord,]
rownames(pg.ord) <- NULL
pg.ord
library(dplyr)
# penguins 데이터셋을 날개의 길이를 기준으로 오름차순으로 정렬하되,
# 날개의 길이가 같으면 체질량을 기준으로 내림차순으로 정렬해보자.
ord2 <- order(pg$flipper_length_mm, -pg$body_mass_g, decreasing = F)
# penguins 데이터셋을 날개의 길이를 기준으로 오름차순으로 정렬하되,
# 날개의 길이가 같으면 체질량을 기준으로 내림차순으로 정렬해보자.
ord2 <- order(pg$flipper_length_mm, -pg$body_mass_g, decreasing = F)
pg.ord2 <- pg[ord2,]
rownames(pg.ord2) <- NULL
pg.ord2
View(set)
View(sp)
View(vrs)
# 비율 구하기 aggregate by >> 수치형 데이터 들어가야함
df <- na.omit(penguins)
FUN = length
prop.table(table(df$species))
View(div3.cnt)
table(df$island, df$species)
prop.table(table(df$island, df$species))
library(gmodels)
install.packages('gmodels')
View(div.cnt3)
library(gmodels)
CrossTable(df$island, df$species,
prop.t = F, prop.chisq = T)
view(CrossTable(df$island, df$species,
prop.t = F, prop.chisq = T))
CrossTable(df$island, df$species,
prop.t = F, prop.chisq = T)
describe(pg)[, c(1:3,8:9)]
# ggplot
install.packages('ggplot')
library(ggplot2)
aggregate(df[,3:6],
by = list(species = df$species),
FUN = mean)
# 9장
pg <- data.frame(penguins)
pg
str(pg)
dim(pg)
summary(penguins[, c(1, 2, 7)])
aggr(pg, numbers = T, prop = F)
pg <- na.omit(pg)
aggr(pg, numbers = T, prop = F)
dim(pg)
# table table 값들의 빈도수를 보여줌
table(pg$island)
barplot(table(pg$island))
table(pg$species)
barplot(table(pg$species))
table(pg$sex)
barplot(table(pg$sex))
# 3가지 범주형 변수에 대한 막대그래프
par(mfrow = c(1,3))
barplot(table(pg$island), col = c('pink','green','blue'))
barplot(table(pg$species), col = c('skyblue','violet','orange'))
barplot(table(pg$island))
table(pg$species)
aggregate(pg[,3:6],
by = list(species = pg$species),
FUN = mean)
par(mfrow = c(2,2))
boxplot(bill_length_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(bill_depth_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(flipper_length_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(body_mass_g ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
par(mfrow = c(1,1))
par(mfrow = c(1,4))
boxplot(pg$bill_length_mm,
col = 'orange',
border = 'black',
pch = 19)
boxplot(pg$bill_depth_mm,
col = 'orange',
border = 'black',
pch = 19)
boxplot(pg$flipper_length_mm,
col = 'orange',
border = 'black',
pch = 19)
boxplot(pg$body_mass_g,
col = 'orange',
border = 'black',
pch = 19)
par(mfrow = c(1,1))
hist(pg$bill_length_mm, col = 'skyblue')
l
par(mfrow = c(1,3))
barplot(table(pg$island), col = c('pink','green','blue'))
barplot(table(pg$species), col = c('skyblue','violet','orange'))
barplot(table(pg$sex), col = c('yellow','red'))
par(mfrow = c(1,1))
par(mfrow = c(2,2))
boxplot(bill_length_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(bill_depth_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(flipper_length_mm ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
boxplot(body_mass_g ~ species, data = pg,
col = c('pink','skyblue','green'),
border = 'brown',
pch = 19)
par(mfrow = c(1,1))
boxplot.stats(pg$species)
boxplot.stats(pg$species)
boxplot.stats(flipper_length_mm ~ species, data = pg)
pg
boxplot.stats(pg)
boxplot.stats(pg$species)
boxplot.stats(pg$flipper_length_mm)
boxplot.stats(pg$bill_depth_mm)
boxplot.stats(pg$bill_depth_mm)$out
View(survey)
boxplot(flipper_length_mm ~ species,
data = pg, col = 2:4)
adelie <- split(df, df$species)$Adelie
adelie
boxplot.stats(adelie$flipper_length_mm)
boxplot.stats(adelie$flipper_length_mm)$out
outlier <- boxplot.stats(adelie$flipper_length_mm)$out
df[df$flipper_length_mm %in% outlier,]
adelie <- split(df, f = df$species)$Adelie
adelie
outlier <- boxplot.stats(adelie$flipper_length_mm)$out
df[df$flipper_length_mm %in% outlier,]
dim(df[df$flipper_length_mm %in% outlier,])
pg.ord2
View(pg.ord2)
# penguins 데이터셋을 날개의 길이를 기준으로 오름차순으로 정렬하되,
# 날개의 길이가 같으면 체질량을 기준으로 내림차순으로 정렬해보자.
ord2 <- order(pg$flipper_length_mm, -pg$body_mass_g)
pg.ord2 <- pg[ord2,]
rownames(pg.ord2) <- NULL
View(pg.ord2)
View(set)
View(set)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
tinytex::install_tinytex()
plot(pg$bill_length_mm,pg$bill_depth_mm)
plot(pg$bill_length_mm,pg$bill_depth_mm, pch = 19, col = 'red')
boxplot(Petal.Length ~ Species, data = iris,
col = 'orange',
border = 'brown',
pch = 19)
hist(pg$bill_length_mm, col = 'skyblue')
barplot(table(iris$Species),
col = 'tomato',
main = '품종의 막대그래프',
xlab = '품종',
ylab = '개수')
aggregate(df[,-5],
by = list(품종=df$Species),
FUN = mean)
table(pg$species)
table(pg$species)
barplot(table(pg$species))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = my.color)
plot(pg$bill_length_mm,pg$bill_depth_mm, pch = 19, col = 'red')
my.color <- ifelse(pg$species == 'Gentoo', 1,
ifelse(pg$species == 'Adelie', 'steelblue', 'orange'))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = my.color)
my.color <- ifelse(pg$species == 'Gentoo', 1,
ifelse(pg$species == 'Adelie', 'steelblue', 'orange'))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = my.color)
my.color <- ifelse(pg$species == 'Gentoo', 1,
ifelse(pg$species == 'Adelie', 2, 3))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = my.color)
#my.color <- ifelse(pg$species == 'Gentoo', 1,
#                   ifelse(pg$species == 'Adelie', 2, 3))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = as.numeric(pg$species))
#my.color <- ifelse(pg$species == 'Gentoo', 1,
#                   ifelse(pg$species == 'Adelie', 2, 3))
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = as.numeric(pg$species)+1)
pg <- na.omit(pg)
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = as.numeric(pg$species)+1)
library(palmerpenguins)
data(package = 'palmerpenguins')
data('penguins')
pg <- data.frame(penguins)
pg <- na.omit(pg)
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = as.numeric(pg$species)+1)
library(palmerpenguins)
data('penguins')
pg <- data.frame(penguins)
pg <- na.omit(pg)
plot(pg$bill_length_mm, pg$bill_depth_mm,
pch = 19, col = as.numeric(pg$species)+1)
plot(pg$bill_length_mm, pg$bill_depth_mm)
plot(df, col = 'green', pch = 19)
cod(df)
cor(df)
df <- mtcars
str(df)
df <- mtcars[,1:6]
df
plot(df, col = 'green', pch = 19)
cor(df)
library(corregram)
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(df)
lm(mpg ~ , data = df)
lm(mpg ~ ., data = df)
model <- lm(mpg ~ ., data = df)
summary(model)
model <- lm(mpg ~ hp + wt, data = df)
summary(model)
Titanic
tb <- margin.table(Titanic, margin = c(4,1))
tb
Titanic
Titanic
tb
tb <- margin.table(Titanic, margin = c(4,2))
tb
tb <- margin.table(Titanic, margin = c(3,2))
tb
# 데이터가 정규 분포를 따르는지 샤피로 윌크 검정을 수행한다. 귀무가설은 정규 분포를 따른다는 것
shapiro.test(survey$Height)
# 평균의 차이
t.test(Bwt ~ Sex, data = cats, conf.level = 0.95)
data(cats)
cats
library(cats)
str(cats)
library(cats)
install.packages('cats')
library(cats)
str(cats)
data(cats)
iris
shapiro.test(iris)
shapiro.test(iris[,-5])
shapiro.test(iris$Sepal.Length)
hist(iris$Sepal.Length)
shapiro.test(iris)
shapiro.test(iris$Sepal.Width)
hist(iris$Sepal.Width)
shapiro.test(iris$Sepal.Width)
shapiro.test(iris$Sepal.Length)
hist(iris$Sepal.Length)
shapiro.test(iris$Sepal.Width)
hist(iris$Sepal.Width)
t.test(Sepal.Length ~ Species, data = iris)
t.test(Sepal.Length ~ Species, data = iris)
t.test(Species ~ Sepal.Length, data = iris)
iris
t.test(iris$Sepal.Length ~ iris$Species)
t.test(iris$Sepal.Length ~ iris$Species)
iris$Species
str(sleep)
t.test(extra ~ group, data = sleep, paired = T)
sleep$extra
sleep$group
sleep
t.test(extra ~ group, data = sleep, paired = T)
library(vcd)
vcd
Arthritis
car
library(car)
car
data("Prestige")
Prestige
?car
?car
carData
?airquality
library(help=car)
data("mtcars")
mtcars
t.test(mpg ~ cyl, data = mtcars)
t.test(mpg,cyl, data = mtcars)
read.csv('../diabetes/diabetes.csv')
df <- read.csv('../diabetes/diabetes.csv')
df
t.test(Insulin ~ Outcome, data = df)
t.test(df$Glucose ~ Outcome, data = df)
t.test(Insulin ~ Outcome, data = df)
cor.test(Insulin ~ Outcome, data = df)
cor.test(Insulin,Outcome, data = df)
cor.test(df$Insulin,df$Outcome)
t.test(df$Glucose ~ Outcome, data = df)
cor.test(df$Glucose,df$Outcome)
t.test(df$Glucose ~ Outcome, data = df)
cor.test(df$Glucose,df$Outcome)
t.test(Pregnancies ~ Outcome, data = df)
cor.test(df$Pregnancies,df$Outcome)
boxplot(df$Pregnancies~df$Outcome)
boxplot(df$Insulin~df$Outcome)
df$Pregnancies
length(df[,1])
for (i in 1:length(df[,1])) {
if (df[i,1] >= 1) {
df[i,1] <- 1
}
}
df$Pregnancies
df$Pregnancies <- factor(df$Pregnancies)
chisq.test(df$Pregnancies, df$Outcome)
boxplot(df$Pregnancies, df$Outcome)
chisq.test(df$Pregnancies, df$Outcome)
t.test(df$BloodPressure ~ Outcome, data = df)
t.test(df$SkinThickness ~ Outcome, data = df)
t.test(df$BMI ~ Outcome, data = df)
library(HistData)
df <- GaltonFamilies
str(df)
plot(jitter(childHeight)~jitter(midparentHeight),
data = df,
col = adjustcolor('steelblue', alpha = 0.5))
model <- lm(childHeight ~ midparentHeight, data = df)
abline(model, col = 'tomato', lwd = 3)
model
summary(model)
# 신뢰구간
confint(model)
View(lst)
shapiro.test(df$prestige)
plot(df[, -(5:6)], pch = 19, col = 'steelblue')
model <- lm(income ~ education, data = df)
df
cor(df[, -(5:6)])
model
View(df.day)
View(df1)
model <- lm(income ~ education, data = df)
model
# 분산 분석
anova(model)
library(corrgram)
corrgram(df)
lm(mpg ~ ., data = df)
library(dplyr)
model <- lm(income ~ education + I(education^2), data = df)
summary(model)
(model)
(model)
library(HistData)
df <- GaltonFamilies
str(df)
cor(df$midparentHeight, df$childHeight)
plot(jitter(childHeight)~jitter(midparentHeight),
data = df,
col = adjustcolor('steelblue', alpha = 0.5))
model <- lm(childHeight ~ midparentHeight, data = df)
model
leveanTest(model)
leveneTest(model)
levene.test(model)
leveneTest(model)
leveneTest(model)
model
leveneTest(model)
leveneTest(childHeight ~ midparentHeight, data = df)
leveneTest(childHeight ~ midparentHeight, data = df)
leveneTest(childHeight,midparentHeight, data = df)
df
leveneTest(df$childHeight,df$midparentHeight)
leveneTest(df$childHeight,df$gender)
library(tidyverse)
library(tidyverse)
df <- InsectSprays
df <- InsectSprays
str(df)
table(df$spray)
df
str(df)
aov(count ~ spray, data = df)
summary(aov(count ~ spray, data = df))
round(tapply(df$count, INDEX = list(df$spray), FUN =  mean), 3)
# oneway <> aov 차이 : aov 출력되는 통계량 더 많지만, summary로 출력해야 p-value 나옴
# oneway 집단변수로 입력된 값 자동으로 범주형으로 인식 but aov 는 연속형 변수로 인식하기 때문에
# factor를 사용해 범주형으로 바꿔야함
aov.result <- aov(count ~ spray, data = df)
# 사후검정 집단 내 각각
TukeyHSD(aov.result)
library(palmerpenguins)
pg <- penguins
pg <- pg[complete.cases(pg),]
pg
str(pg)
dim(pg)
pg <- pg[complete.cases(pg),-8]
str(pg)
dim(pg)
pg$is.adelie <- factor(ifelse(pg$species == 'Adelie', 'Yes', 'No'))
pg$is.adelie
barplot(table(pg$bill_length_mm))
barplot(table(pg$is.adelie))
aov(pg$bill_length_mm~pg$is.adelie)
summary(aov(pg$bill_length_mm~pg$is.adelie))
pg <- pg[,-1]
model <- glm(is.adelie ~ ., data = pg, family = binomial(link = 'logit'))
pg <- pg[,-1]
model <- glm(is.adelie ~ ., data = pg, family = binomial(link = 'logit'))
summary(model)
model$fitted.values
model$fitted
pg$pred <- factor(ifelse(model$fitted.values > 0.5, 'Yes', 'No'))
table(pg$is.adelie, pg$pred)
pg <- penguins
pg <- pg[complete.cases(pg),-8]
str(pg)
dim(pg)
pg$species <- factor(ifelse(pg$species == 'virginica', 'Yes', 'No'))
model <- glm(Species ~ ., data = pg, family = binomial(link = 'logit'))
model <- glm(Species ~ ., data = pg, family = binomial(link = 'logit'))
pg <- penguins
pg <- pg[complete.cases(pg),-8]
str(pg)
pg$species <- factor(ifelse(pg$species == 'virginica', 'Yes', 'No'))
model <- glm(Species ~ ., data = pg, family = binomial(link = 'logit'))
model <- glm(species ~ ., data = pg, family = binomial(link = 'logit'))
summary(model)
model$fitted
pg$pred <- factor(ifelse(model$fitted.values > 0.5, 'Yes', 'No'))
table(pg$is.adelie, pg$pred)
table(pg$species, pg$pred)
pg <- penguins
pg <- pg[complete.cases(pg),-8]
str(pg)
dim(pg)
pg$species <- factor(ifelse(pg$species == 'virginica', 'Yes', 'No'))
model <- glm(species ~ ., data = pg, family = binomial(link = 'logit'))
summary(model)
model$fitted
pg$pred <- factor(ifelse(model$fitted.values > 0.5, 'Yes', 'No'))
table(pg$species, pg$pred)
pg <- penguins
df <- penguins
df <- iris
df$Species <- factor(ifelse(
df$Species == "virginica", "Yes", "No"))
model <- glm(Species ~ ., data = df,
family = binomial(link = "logit"))
summary(model)
df$pred <- factor(ifelse(
model$fitted.values > 0.5, "Yes", "No"))
df$pred
table(df$pred, df$Species)
tab <- table(df$pred, df$Species)
TP <- tab[2,2]
TN <- tab[1,1]
PF <- tab[2,1]
FN <- tab[1,2]
accuracy <- (TP + TN) / (TP + TN + FP + FN)
library(pROC)
install.packages('pROC')
library(pROC)
roc(Species ~ model$fitted.values, data = df, plot = TRUE, main = 'ROC CURVE')
df <- split(iris, f = iris$Species)
df <- rbind(df$setosa, df$versicolor)
plot(df[, c(3,5)])
df$Species <- as.numeric(df$Species)
glm(Species ~ Petal.Length, data = df, family = binomial(link = 'logit'))
df <- split(iris, f = iris$Species)
df <- rbind(df$setosa, df$versicolor)
plot(df[, c(3,5)])
df$Species <- as.numeric(df$Species)
glm(Species ~ Petal.Length, data = df, family = binomial(link = 'logit'))
df <- penguins
df <- iris
df$Species <- factor(ifelse(
df$Species == "virginica", "Yes", "No"))
model <- glm(Species ~ ., data = df,
family = binomial(link = "logit"))
summary(model)
plot(model)
par(nfrow = c(2,2))
plot(model)
par(mfrow = c(2,2))
plot(model)
q
View(penguins_raw)
